---
alwaysApply: true
---


# Architecture of vCore Framework & App

## Technical Summary

The vCore Framework is a boilerplate for a modern Python stack using FastAPI for the backend, SQLModel for database operations, and Jinja2 for templating. It follows a structured pattern for CRUD operations and provides both REST API endpoints and web views for user interaction.

This project's initial codebase is based off the vCore App Framework. It has been built out to include all the project features from this starting point.

Since this project is built on top of the vCore Framework, it's naturally split into two main parts: "app" code and "vcore" package (locally installed in the 'vcore' folder). The "app" folder contains the project-specific code, and the "vcore" folder contains the vCore Framework package.

The vCore Framework is designed to be a flexible and extensible framework that can be used to build a wide variety of applications. It is designed to be a starting point for new projects to get up and running quickly and easily.

## Technology Table

| Technology | Description |
|------------|-------------|
| FastAPI | Backend web framework providing both API and web interfaces |
| SQLModel | SQLAlchemy-based ORM for database operations |
| SQLite3 | Local database storage |
| PostgreSQL | Remote database storage |
| Alembic | Database migration management |
| Jinja2 | HTML templating engine |
| Bootstrap | Frontend CSS framework |
| JWT | Token-based authentication |
| OAuth2 | Authentication flow implementation |
| Poetry | Dependency management |
| Loguru | Logging system |
| HTML/CSS/JavaScript | Frontend technology stack |
| Huey | Background task queue |

## Architectural Diagrams

### Component Architecture

```mermaid
graph TD
    User[User] --> WebInterface[Web Interface]
    User --> APIEndpoints[API Endpoints]
    
    WebInterface --> Routes[Routes]
    APIEndpoints --> Routes
    
    Routes --> CRUD[CRUD Operations]
    Routes --> Services[Services]
    
    CRUD --> Models[SQLModel Models]
    Models --> Database[(SQLite Database)]
    
    Services --> ExternalSystems[External Systems]
    
    subgraph Application
        WebInterface
        APIEndpoints
        Routes
        CRUD
        Models
        Services
    end
    
    style User fill:#f9f,stroke:#333
    style Application fill:#eef,stroke:#333,stroke-dasharray: 5 5
    style Database fill:#bbf,stroke:#333
    style ExternalSystems fill:#fbb,stroke:#333
```

### Authentication Flow

```mermaid
sequenceDiagram
    participant User
    participant WebApp as Web App/API
    participant Auth as Auth Service
    participant DB as Database
    
    User->>WebApp: Login Request
    WebApp->>Auth: Validate Credentials
    Auth->>DB: Check User
    DB->>Auth: User Data
    Auth->>WebApp: Generate Tokens
    WebApp->>User: Set Cookies/Headers
    
    User->>WebApp: Protected Route Request
    WebApp->>Auth: Token Validation
    alt Valid Token
        Auth->>WebApp: Authorized
        WebApp->>User: Protected Resource
    else Invalid Token
        Auth->>WebApp: Unauthorized
        WebApp->>User: Redirect to Login
    end
    
    User->>WebApp: Token Expired
    WebApp->>Auth: Refresh Token
    Auth->>WebApp: New Access Token
    WebApp->>User: Continue Session
```

## Requirements

- Follow the established directory hierarchy for vCore applications
- Place your app's backend code in `app/` directory with proper sub-organization
- Use `frontend/` for templates and static assets
- Organize code by layer: models, crud, routes, services, utils
- Import vCore framework components from the `vcore` package
- Follow naming conventions: snake_case for files, PascalCase for classes

## Project Scaffold Structure

```
app/                   # App directory (Main Application Directory)
├── agents/            # LLM Agent-based functionalities
├── crud/              # Database/SQLModel CRUD operations
│   ├── [entity_name].py   # Entity models
│   └── __init__.py    # Crud package initialization
├── handlers/          # Custom handlers
├── logic/             # Business logic layer
├── middleware/        # Request/response middleware
├── models/            # SQLModel database models
│   ├── scripts/       # Script-specific models
│   ├── tools/         # Tool-specific models
│   ├── __init__.py    # Models package initialization
│   ├── [entity_name].py   # Entity models
│   └── settings.py    # Settings model
├── routes/            # Route definitions and registration
│   ├── api/           # API route registration
│   │   ├── v1/        # API version 1
│   │   │   └── endpoints/ # API endpoints
│   │   │       └── [endpoints].py # App API endpoints
│   └── views/         # View route registration
│       ├── [view_name]/ # View handlers
├── scripts/           # App scripts (vCore Scripts)
├── services/          # External service integrations
├── jobs/              # Background and scheduled jobs/tasks
├── templating/        # Jinja2 environment, filters, and context
├── utils/             # Utility functions and helpers
├── workflows/         # Multi-step process workflows
├── __init__.py        # App initialization, settings, and version
├── __main__.py        # Entry point for running the app directly
├── app.py             # FastAPI application initialization
├── paths.py           # Path definitions for the application
└── pyproject.toml     # Poetry project configuration

data/                  # Data storage and resources (gitignored)

docs/                  # Project documentation
├── assets/            # Documentation assets (images, etc.)
└── [other docs]       # Additional documentation files

frontend/              # Frontend directory (Main Frontend Directory)
├── static/            # Frontend static assets (CSS, JS, images, icons)
│   ├── css/           # CSS files
│   ├── documents/     # Document files
│   ├── icons/         # Icon files
│   ├── images/        # Image files
│   └── js/            # JavaScript files
├── templates/         # Jinja2 HTML templates for frontend
│   ├── base/          # Base templates
│   ├── errors/        # Error pages
│   ├── login/         # Login and registration templates
│   ├── root/          # Root/homepage templates
│   ├── scripts/       # Script-related templates
│   ├── tools/         # Tool templates
│   └── user/          # User profile templates
├── __init__.py        # Frontend initialization

migrations/            # Alembic database migrations

tests/                 # Test suite

thunder-tests/         # Thunder client API test collections

typings/               # Type stubs and typings

vcore/                 # vCore Framework's Submodule directory (Main vCore Framework Directory)
├── backend/           # vCore backend components
│   ├── core/          # Core backend modules
│   ├── crud/          # CRUD operations for vCore
│   ├── data/          # Data storage for vCore
│   ├── handlers/      # Backend handlers
│   ├── logic/         # Business logic for vCore
│   ├── middleware/    # Middleware for vCore
│   ├── models/        # Data models for vCore
│   ├── routes/        # API and view routes for vCore
│   ├── scripts/       # Scripts for vCore
│   ├── services/      # Service integrations for vCore
│   ├── tasks/         # Background tasks for vCore
│   ├── templating/    # Jinja2 environment and filters for vCore
│   └── utils/         # Utility functions for vCore
├── frontend/          # vCore frontend components (if any)
├── .ai/               # vCore AI rules and documentation
├── pyproject.toml     # vCore Poetry project configuration

alembic.ini            # Alembic configuration
Dockerfile             # Docker build file
LICENSE                # Project license
Makefile               # Project build and management commands
README.md              # Project overview and instructions
requirements.txt       # Python requirements file
pyproject.toml         # Python project configuration
start.sh               # Docker Startup script
```

## Key Architectural Decisions

1. **Dual-Purpose Application**
   - Serves both as a REST API and web application
   - API routes use `/api/v1/*` pattern
   - Web routes use direct paths
   - Shared models and CRUD operations between API and web

2. **CRUD Pattern Implementation**
   - Generic base CRUD class for common operations
   - Entity-specific CRUD classes extending base functionality
   - Consistent database operations across the application

3. **Local Single-User Design**
   - Designed for a single user with full control
   - Runs locally without multi-user authentication
   - Emphasizes functionality over complex authentication

## Database Management

The project uses SQLModel and/or PostgreSQL with Alembic for migrations:

- When models change, migrations must be generated and applied
- End users need to run:

  ```sh
  1. alembic revision --autogenerate -m "description_of_changes"
  2. alembic upgrade head
  ```

## Examples

<example>
# Good: Proper vCore app structure
app/
  models/         # Your app's data models
  crud/           # Your app's CRUD operations
  routes/
    api/v1/endpoints/  # Your API endpoints
    views/        # Your web page handlers
  services/       # Your business logic
  utils/          # Your helper functions
  
frontend/
  templates/      # Your Jinja2 templates
  static/         # Your CSS, JS, images

vcore/            # local vcore package

# Import vCore components

from vcore.backend.core import db
from vcore.backend.crud.base import BaseCRUD
</example>

<example type="invalid">
# Bad: Mixed organization without vCore structure
src/
  everything_mixed_together.py
  random_utils.py
templates_somewhere/
static_elsewhere/

# Wrong imports - trying to import from vCore project structure

from backend.core import db  # Should be: from vcore.backend.core import db
</example>

## Critical Rules

- **MOST IMPORTANT**: DO NOT MAKE SWEEPING CHANGES TO EXISTING CODE. You cause more bugs and problems than you solve. If you are given a task to do, only change the code that is directly related to the task.
- ALWAYS place your CRUD operations in `app/crud/`
- ALWAYS place your API endpoints in `app/routes/api/v1/endpoints/`
- ALWAYS place your web view handlers in `app/routes/views/`
- ALWAYS place your business logic in `app/logic/`
- ALWAYS place your services in `app/services/`
- ALWAYS import vCore components from the `vcore` package
- NEVER mix app-specific code with vCore framework imports incorrectly

## Additional Contexts

@file /cursor/rules/project/0301-project-architecture.mdc - Project Specific Architecture
