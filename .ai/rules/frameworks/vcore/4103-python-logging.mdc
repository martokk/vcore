---
description: USE app.logger when LOGGING in Python to ensure consistent logging across the codebase
globs: app/**/*.py,vcore/backend/**/*.py
alwaysApply: false
---

# Python Logging Standards

## Context

- When adding logging statements to Python files
- When refactoring existing logging code
- When creating new modules that require logging

## Requirements

- Import the logger directly from the app module (`from app import logger`)
- Never create new logger instances with logging.getLogger()
- Use consistent logging levels (debug, info, warning, error, critical)
- Include contextual information in log messages when appropriate
- Always log the exception before raising it

## Examples

<example>
# Correct usage
from app import logger

def process_data(input_data):
    try:
        result = transform_data(input_data)
        logger.info(f"Successfully processed data: {len(result)} items")
        return result
    except Exception as e:
        logger.error(f"Error processing data: {str(e)}")
        raise
</example>

<example type="invalid">
# Incorrect usage
import logging
logger = logging.getLogger(__name__)

def process_data(input_data):
    try:
        result = transform_data(input_data)
        logger.info(f"Successfully processed data: {len(result)} items")
        return result
    except Exception as e:
        raise
</example>

## Critical Rules

- ALWAYS use `from app import logger` for logging
- NEVER use `import logging` followed by `logger = logging.getLogger(__name__)`
- ALWAYS include meaningful context in log messages
- USE appropriate log levels based on the severity of the event
