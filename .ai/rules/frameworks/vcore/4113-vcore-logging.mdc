---
description: USE app.logger when LOGGING in Python to ensure consistent logging across the codebase
globs: **/*.py
alwaysApply: false
---

# vCore Logging

## Context

- When adding logging to application functionality
- When debugging and monitoring application behavior
- When tracking important events and errors
- When adding logging statements to Python files
- When refactoring existing logging code
- When creating new modules that require logging

## Requirements

- Import the logger directly from the app module (`from app import logger`)
- Use the app logger instance for consistency  
- Never create new logger instances with logging.getLogger()
- Include contextual information in log messages
- Log important business events and errors
- Use structured logging with relevant data
- Avoid logging sensitive information
- Include contextual information in log messages when appropriate
- Always log the exception before raising it

## Examples

<example>
# Good: Proper logging usage
from app import logger

async def process_job(job_id: str) -> None:
    logger.info(f"Starting job processing for job {job_id}")
    try:
        # Processing logic
        logger.info(f"Job {job_id} completed successfully")
    except Exception as e:
        logger.error(f"Job {job_id} failed: {e}")
        raise
</example>

<example type="invalid">
# Bad: Poor logging practices
import logging
print(f"Debug info: {sensitive_data}")  # Wrong method
logging.info("Something happened")  # No context
</example>

## Critical Rules

- ALWAYS use the app logger instance (from app import logger)
- NEVER use `import logging` followed by `logger = logging.getLogger(__name__)`
- ALWAYS include relevant context in log messages (IDs, operations)
- ALWAYS use appropriate log levels for message severity
- NEVER log sensitive information (passwords, tokens)
- ALWAYS log exceptions with proper error context
