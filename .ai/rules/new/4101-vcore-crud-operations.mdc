---
description: Use vCore BaseCRUD patterns when implementing database operations for consistent data access
globs: backend/crud/**/*.py,backend/models/**/*.py
alwaysApply: false
---

# vCore CRUD Operations

## Context
- When creating database operations for models
- When implementing data access patterns
- When working with SQLModel database interactions

## Requirements
- Always inherit from `BaseCRUD` for standard models
- Use `BaseOrderedCRUD` for models requiring position management
- Implement custom CRUD methods in model-specific classes
- Create both sync and async CRUD classes when needed
- Use decorators for WebSocket broadcasting (jobs)
- Handle exceptions using vCore CRUD exception types

## Examples

<example>
# Good: Proper CRUD implementation
from vcore.backend.crud.base import BaseCRUD
from vcore.backend.models import MyModel, MyModelCreate, MyModelUpdate

class MyModelCRUD(BaseCRUD[MyModel, MyModelCreate, MyModelUpdate]):
    async def custom_query(self, db: Session, **filters) -> list[MyModel]:
        return await self.get_multi(db, **filters)

my_model = MyModelCRUD(model=MyModel)
</example>

<example type="invalid">
# Bad: Direct database queries without CRUD
from sqlmodel import select

def get_models(db: Session):
    return db.exec(select(MyModel)).all()  # Should use CRUD
</example>

## Critical Rules
- ALWAYS use BaseCRUD or BaseOrderedCRUD as base classes
- ALWAYS create CRUD instance at module level: `model_name = ModelCRUD(model=Model)`
- ALWAYS use type hints with Generic[ModelType, CreateType, UpdateType]
- NEVER write direct SQL queries when CRUD methods exist
- ALWAYS handle RecordNotFoundError and other CRUD exceptions